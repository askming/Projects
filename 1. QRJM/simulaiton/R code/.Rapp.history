Ti
sum(is.na(Ti))
Ti_na_id = which(is.na(Ti))
Ti_na_id
names(testdata)
list()
a = list()
a
length(subdata)
length(testdata)
a = vector(mode='list', 2)
a
a[['a']] = 1
a
a = list()
a[['a']]=1
a
x = array(c(1:9), dim=c(3,3,3))
a
x
x[-c(1),,]
testdata$U
sim_longitudinal_data = function(n=300, t=6, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# n - # of subjects#
	# t - # of measures per subjects without drop-outs#
	# tau - quantile#
	# sigma - scale parameter#
	time = c(0, 0.25, 0.5, 0.75, 1, 3)#
	y = matrix(NA, nrow=n, ncol=t) # wide format#
	X = H = Z = array(NA, dim=c(n, t, 2)) # array, wide format#
	 # leng = n#
	X[ , , 1] = Z [, , 1]= 1  #
	X[ , , 2] = matrix(rep(rnorm(n), each=t), ncol=t, byrow=T)#
	Z[ , , 2] = matrix(rep(time, n), nrow=n, byrow=T)#
	H[ , , 1] = matrix(rep(rnorm(n), each=t), ncol=t, byrow=T)#
	H[ , , 2] = matrix(rep(rnorm(n), each=t), nrow=n, byrow=T)#
	U = NULL # random effects#
	for (i in 1:n){#
		u = mvrnorm(1, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
		U = rbind(U, u)#
		for (j in 1:t){#
			location = beta %*% X[i,j, ] + delta %*% c(H[i,j,1], H[i,j,2]*time[j]) + u %*% Z[i,j, ]#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)#
		}	#
	}#
	list(y = y, X = X, Z = Z, H = H, U = U)		#
}
testdata = sim_longitudinal_data(tau=0.25, beta=c(1,1), delta=c(1,1))
testdata$U
dim(testdata$U)
subdata = function(data, id){#
	sub_data = list()#
	for i in names(data){#
		if (i %in% c('y', 'U')) subdata[[i]] = data[[i]][-i, ]#
		else sub_data[[i]] = data[[i]][-id, ,]#
	}#
}
subdata = function(data, id){#
	sub_data = list()#
	for (i in names(data)){#
		if (i %in% c('y', 'U')) subdata[[i]] = data[[i]][-i, ]#
		else sub_data[[i]] = data[[i]][-id, ,]#
	}#
}
newtestdata = subdata (testdata, id=Ti_na_id)
Ti_na_id
class(Ti_na_id)
as.vector(Ti_na_id)
class(as.vector(Ti_na_id))
c(Ti_na_id)
subdata = function(data, id){#
	sub_data = list()#
	for (i in names(data)){#
		if (i %in% c('y', 'U')) subdata[[i]] = data[[i]][-id, ]#
		else sub_data[[i]] = data[[i]][-id, ,]#
	}#
}
newtestdata = subdata (testdata, id=Ti_na_id)
testdata[[y]][-Ti_na_id]
testdata[['y']][-Ti_na_id,]
testdata[['X']][-Ti_na_id,]
testdata[['X']][-Ti_na_id,,]
testdata[['Z']][-Ti_na_id,,]
testdata[['H']][-Ti_na_id,,]
testdata[['U']][-Ti_na_id,]
subdata = function(data, id){#
	sub_data = list()#
	for (i in names(data)){#
		if (i %in% c('y', 'U')) sub_data[[i]] = data[[i]][-id, ]#
		else sub_data[[i]] = data[[i]][-id, ,]#
	}#
}
newtestdata = subdata(testdata, id=Ti_na_id)
newtestdata
``[[``
`[[`
?`[[`
subdata$y[[c(1:250)]]
testdata$y[[c(1:250)]]
testdata$y[[c(1:250),]]
testdata$y[c(1:250)]
testdata$y
testdata$y[c(1:250),]
?`[`
subdata = function(data, id){#
	sub_data = list()#
	for (i in names(data)){#
		if (i %in% c('y', 'U')) sub_data[[i]] = (data[[i]][-id, ])[1:250,]#
		else sub_data[[i]] = (data[[i]][-id, ,])[1:250, , ]#
	}#
	sub_data#
}
newtestdata = subdata(testdata, id=Ti_na_id)
str(newtestdata)
Ti[-Ti_na_id][1:250]
sum(Ti > C)/250
Ti
new_Ti = Ti[-Ti_na_id][1:250]
sum(new_Ti > C)/250
new_Ti = Ti[-Ti_na_id][1:250]
sum(new_Ti > C)/250
C = rbeta(250, 4, 1) * 5
C
new_Ti
sum(new_Ti > C)/250
sum(new_Ti > C | new_Ti > 3)/250
which(new_Ti > C | new_Ti > 3)
4/250
range(new_Ti)
summary(new_Ti)
Ti = sim_Ti(testdata, alpha=c(0,0), delta=c(1,1), gamma=c(1,1))
sim_longitudinal_data = function(n=300, t=6, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# n - # of subjects#
	# t - # of measures per subjects without drop-outs#
	# tau - quantile#
	# sigma - scale parameter#
	time = c(0, 0.25, 0.5, 0.75, 1, 3)#
	y = matrix(NA, nrow=n, ncol=t) # wide format#
	X = H = Z = array(NA, dim=c(n, t, 2)) # array, wide format#
	 # leng = n#
	X[ , , 1] = Z [, , 1]= 1  #
	X[ , , 2] = matrix(rep(rnorm(n), each=t), ncol=t, byrow=T)#
	Z[ , , 2] = matrix(rep(time, n), nrow=n, byrow=T)#
	H[ , , 1] = matrix(rep(rnorm(n), each=t), ncol=t, byrow=T)#
	H[ , , 2] = matrix(rep(rnorm(n), each=t), nrow=n, byrow=T)#
	U = NULL # random effects#
	for (i in 1:n){#
		u = mvrnorm(1, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
		U = rbind(U, u)#
		for (j in 1:t){#
			location = beta %*% X[i,j, ] + delta %*% c(H[i,j,1], H[i,j,2]*time[j]) + u %*% Z[i,j, ]#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)#
		}	#
	}#
	list(y = y, X = X, Z = Z, H = H, U = U)		#
}
sim_Ti = function(longidata, n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	Z = longidata$Z#
	H = longidata$H#
	U = longidata$U[seq(1,n*6,6),]#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = exp(alpha[1] * delta[1] * H[i,1,1] + alpha[2] * U[i,1] + gamma %*% W[i,])#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,1,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	return(Time)	#
}
Ti = sim_Ti(testdata, alpha=c(0,0), delta=c(1,1), gamma=c(1,1))
sim_Ti = function(longidata, n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	Z = longidata$Z#
	H = longidata$H#
	U = longidata$U#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = exp(alpha[1] * delta[1] * H[i,1,1] + alpha[2] * U[i,1] + gamma %*% W[i,])#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,1,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	return(Time)	#
}
Ti = sim_Ti(testdata, alpha=c(0,0), delta=c(1,1), gamma=c(1,1))
Ti_na_id = which(is.na(Ti))#
new_Ti = Ti[-Ti_na_id][1:250]
newtestdata = subdata(testdata, id=Ti_na_id)
rm(list=ls())
library(LaplacesDemon)#
library(MASS)
sim_longitudinal_data = function(n=300, t=6, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# n - # of subjects#
	# t - # of measures per subjects without drop-outs#
	# tau - quantile#
	# sigma - scale parameter#
	time = c(0, 0.25, 0.5, 0.75, 1, 3)#
	y = matrix(NA, nrow=n, ncol=t) # wide format#
	X = H = Z = array(NA, dim=c(n, t, 2)) # array, wide format#
	 # leng = n#
	X[ , , 1] = Z [, , 1]= 1  #
	X[ , , 2] = matrix(rep(rnorm(n), each=t), ncol=t, byrow=T)#
	Z[ , , 2] = matrix(rep(time, n), nrow=n, byrow=T)#
	H[ , , 1] = matrix(rep(rnorm(n), each=t), ncol=t, byrow=T)#
	H[ , , 2] = matrix(rep(rnorm(n), each=t), nrow=n, byrow=T)#
	U = NULL # random effects#
	for (i in 1:n){#
		u = mvrnorm(1, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
		U = rbind(U, u)#
		for (j in 1:t){#
			location = beta %*% X[i,j, ] + delta %*% c(H[i,j,1], H[i,j,2]*time[j]) + u %*% Z[i,j, ]#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)#
		}	#
	}#
	list(y = y, X = X, Z = Z, H = H, U = U)		#
}
sim_Ti = function(longidata, n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	Z = longidata$Z#
	H = longidata$H#
	U = longidata$U#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = exp(alpha[1] * delta[1] * H[i,1,1] + alpha[2] * U[i,1] + gamma %*% W[i,])#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,1,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	return(Time)	#
}
Ti = sim_Ti(testdata, alpha=c(0,0), delta=c(1,1), gamma=c(1,1))
testdata = sim_longitudinal_data(tau=0.25, beta=c(1,1), delta=c(1,1))
Ti = sim_Ti(testdata, alpha=c(0,0), delta=c(1,1), gamma=c(1,1))
Ti_na_id = which(is.na(Ti))
Ti_na_id
new_Ti = Ti[-Ti_na_id][1:250]
new_Ti
Ti
new_Ti = Ti[1:250]
new_Ti
subdata = function(data, id){#
	sub_data = list()#
	for (i in names(data)){#
		if (i %in% c('y', 'U')) sub_data[[i]] = (data[[i]][-id, ])[1:250,]#
		else sub_data[[i]] = (data[[i]][-id, ,])[1:250, , ]#
	}#
	sub_data#
}
newtestdata = subdata(testdata, id=Ti_na_id)
Ti = sim_Ti(testdata, alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
Ti_na_id = which(is.na(Ti))#
new_Ti = Ti[-Ti_na_id][1:250]
subdata = function(data, id){#
	sub_data = list()#
	for (i in names(data)){#
		if (i %in% c('y', 'U')) sub_data[[i]] = (data[[i]][-id, ])[1:250,]#
		else sub_data[[i]] = (data[[i]][-id, ,])[1:250, , ]#
	}#
	sub_data#
}
newtestdata = subdata(testdata, id=Ti_na_id)
which(new_Ti > 3)
summary(new_Ti)
C = rbeta(250, 4, 1) * 5
min(C, 3)
C
min(c(1,2,3), c(4,4,5))
C = rbeta(250, 4, 1) * 5#
new_C = numeric(length(C))#
for (i in length(C)){#
	new_C[i] = min(C[i], 3)#
}
new_C
C = rbeta(250, 4, 1) * 5
new_C = numeric(length(C))#
for (i in 1: length(C)){#
	new_C[i] = min(C[i], 3)#
}
new_C
testdata = sim_longitudinal_data(tau=0.5, beta=c(1,1), delta=c(1,1))
Ti = sim_Ti(testdata, alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
Ti_na_id = which(is.na(Ti))
length(Ti_na_id)
new_Ti = Ti[-Ti_na_id][1:250]
newtestdata = subdata(testdata, id=Ti_na_id)
new_Ti
mvrnorm(2, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))
sim_Ti = function(n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n, ncol=2))#
	U = mvrnorm(n, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = exp(alpha[1] * delta[1] * H[i,1,1] + alpha[2] * U[i,1] + gamma %*% W[i,])#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,1,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	return(Time)	#
}
sim_Ti(testdata, alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
Ti = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
sim_Ti = function(n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = exp(alpha[1] * delta[1] * H[i,1,1] + alpha[2] * U[i,1] + gamma %*% W[i,])#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,1,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	return(Time)	#
}
Ti = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
sim_Ti = function(n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = exp(alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,])#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	return(Time)	#
}
Ti = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
Ti
sim_Ti = function(n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	return(Time)	#
}
Ti = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
warnings()
Ti
sum(is.na(Ti))
summary(Ti, na.rm=T)
sim_Ti = function(n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	list(Ti=Time, H=H, U=U, W=W)	#
}
Ti = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
Ti_na_id = which(is.na(Ti$Time))
Ti$Time
sim_Ti = function(n=300, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	list(Ti=Time, H=H, U=U, W=W)	#
}
Ti = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
Ti_na_id = which(is.na(Ti$Time))
Ti
Ti_na_id = which(is.na(Ti$Ti))
Ti_na_id
new_Ti = Ti[-Ti_na_id][1:250]
new_Ti[1] > time
new_time = Ti$Ti[-Ti_na_id][1:250]
new_time
new_time[1] > time
time
time = c(0, 0.25, 0.5, 0.75, 1, 3)
new_time[1] > time
new_time[1:2] > time
sapply(new_time, function(x) sum(x>time))
sim_longitudinal_data = function(survival_data = Ti, n=250, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# n - # of subjects#
	# tau - quantile#
	# sigma - scale parameter#
	time = c(0, 0.25, 0.5, 0.75, 1, 3)#
	Ti_na_id = which(is.na(survival_data$Ti))#
	new_time = survival_data$Ti[-Ti_na_id][1:n]#
	count = sapply(Ti, function(x) sum(x >time ))#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	U = survival_data$U#
	H = survival_data$H#
	X = cbind(1, rnorm(n))#
#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)#
		}	#
	}#
	list(y = y, X = X, J=count)		#
}
sim_longitudinal_data = function(survival_data=surdata, n=250, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# tau - quantile#
	# sigma - scale parameter#
	time = c(0, 0.25, 0.5, 0.75, 1, 3) # at most 6 observation per patient#
	Ti_id = which(!is.na(survival_data$Ti))#
	new_time = survival_data$Ti[Ti_id][1:n]#
	count = sapply(new_time, function(x) sum(x >time)) # number of observation after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	U = survival_data$U # random effects#
	H = survival_data$H #
	X = cbind(1, rnorm(n))#
#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)#
		}	#
	}#
	list(y = y, X = X, J=count, event=event)		#
}
surdata = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
sim_longitudinal_data(surdata, tau=0.25)
sim_longitudinal_data = function(survival_data=surdata, n=250, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# tau - quantile#
	# sigma - scale parameter#
	time = c(0, 0.25, 0.5, 0.75, 1, 3) # at most 6 observation per patient#
	Ti_id = which(!is.na(survival_data$Ti))#
	new_time = survival_data$Ti[Ti_id][1:n]#
	count = sapply(new_time, function(x) sum(x >time)) # number of observation after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	U = survival_data$U # random effects#
	H = survival_data$H #
	X = cbind(1, rnorm(n))#
#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)#
		}	#
	}#
	out = list(y = y, X = X, J=count, event=event)		#
}
longidata = sim_longitudinal_data(surdata, tau=0.25)
table(logidata$event)
table(longidata$event)
22/250
sim_Ti = function(n=500, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu = c(0,0), Sigma = matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	list(Ti=Time, H=H, U=U, W=W)	#
}
surdata = sim_Ti(alpha=c(1,1), delta=c(1,1), gamma=c(1,1))
Ti_na_id = which(is.na(surdata$Ti))
Ti_id = which(!is.na(surdata$Ti))
length(Ti_id)
Ti = surdata$Ti[Ti_na_id][1:250]
Ti = surdata$Ti[Ti_id][1:250]
sim_longitudinal_data = function(survival_data=surdata, n=250, time, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# tau - quantile#
	# sigma - scale parameter#
	time = time # at most # = length(time) observations per patient#
	Ti_id = which(!is.na(survival_data$Ti))#
	new_time = survival_data$Ti[Ti_id][1:n]#
	count = sapply(new_time, function(x) sum(x > time)) # number of observations after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	U = survival_data$U[Ti_id][1:n] # random effects#
	H = survival_data$H[Ti_id][1:n]#
	X = cbind(1, rnorm(n))#
#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)		#
		}	#
	}#
	list(y = y, X = X, J=count, event=event)		#
}
longidata = sim_longitudinal_data(surdata, time = c(0, 0.25, 0.5, 0.75, 1, 3), tau=0.25)
sim_longitudinal_data = function(survival_data=surdata, n=250, time, tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# tau - quantile#
	# sigma - scale parameter#
	time = time # at most # = length(time) observations per patient#
	Ti_id = which(!is.na(survival_data$Ti))#
	new_time = survival_data$Ti[Ti_id][1:n]#
	count = sapply(new_time, function(x) sum(x > time)) # number of observations after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	U = survival_data$U[Ti_id, ][1:n, ] # random effects#
	H = survival_data$H[Ti_id, ][1:n, ]#
	X = cbind(1, rnorm(n))#
#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale = sigma, kappa = tau)		#
		}	#
	}#
	list(y = y, X = X, J=count, event=event)		#
}
longidata = sim_longitudinal_data(surdata, time = c(0, 0.25, 0.5, 0.75, 1, 3), tau=0.25)
str(longidata)
table(longidata$event)
250*0.25
longidata$J
sim_multiple_data = function(N, sur_fun=sim_Ti, longi_fun=sim_longitudinal_data, alpha, tau){#
	# N - number of data sets to generate#
	# sur_fun - function to simulate survival data#
	# longi_fun - function to sumualte longitudinal data#
	# association mechanism for JM#
	outdata = vector(mode='list', N)#
	for (i in 1:N){#
		sur_data = sur_fun(alpha)#
		longi_data = sim_longitudinal_data(sur_data, tau)#
		outdata[[i]] = list(sur_data, longi_data)		#
	}#
	outdata	#
}
sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
sim_multiple_data = function(N, sur_fun=sim_Ti, longi_fun=sim_longitudinal_data, alpha, tau){#
	# N - number of data sets to generate#
	# sur_fun - function to simulate survival data#
	# longi_fun - function to sumualte longitudinal data#
	# association mechanism for JM#
	outdata = vector(mode='list', N)#
	for (i in 1:N){#
		sur_data = sur_fun(alpha)#
		longi_data = longi_fun(sur_data, tau)#
		outdata[[i]] = list(sur_data, longi_data)		#
	}#
	outdata	#
}
sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
surdata = sim_Ti(alpha=c(1,1))
sim_longitudinal_data = function(survival_data=surdata, n=250, time=c(0, 0.25, 0.5, 0.75, 1, 3), tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# time - time points of observations#
	# tau - quantile#
	# sigma - scale parameter#
	time = time # at most # = length(time) observations per patient#
	Ti_id = which(!is.na(survival_data$Ti))#
	new_time = survival_data$Ti[Ti_id][1:n]#
	count = sapply(new_time, function(x) sum(x > time)) # number of observations after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	U = (survival_data$U[Ti_id, ])[1:n, ] # random effects#
	H = (survival_data$H[Ti_id, ])[1:n, ]#
	X = cbind(1, rnorm(n))#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale=sigma, kappa=tau)		#
		}	#
	}#
	list(y = y, X = X, J=count, event=event)		#
}
sim_Ti = function(n=500, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	list(Ti=Time, H=H, U=U, W=W)	#
}
sim_multiple_data = function(N, sur_fun=sim_Ti, longi_fun=sim_longitudinal_data, alpha, tau){#
	# N - number of data sets to generate#
	# sur_fun - function to simulate survival data#
	# longi_fun - function to sumualte longitudinal data#
	# association mechanism for JM#
	outdata = vector(mode='list', N)#
	for (i in 1:N){#
		sur_data = sur_fun(alpha=alpha)#
		longi_data = longi_fun(sur_data, tau=tau)#
		outdata[[i]] = list(sur_data, longi_data)		#
	}#
	outdata	#
}
sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
testdata = sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
str(testdata)
sim_multiple_data = function(N, sur_fun=sim_Ti, longi_fun=sim_longitudinal_data, alpha, tau){#
	# N - number of data sets to generate#
	# sur_fun - function to simulate survival data#
	# longi_fun - function to sumualte longitudinal data#
	# association mechanism for JM#
	outdata = vector(mode='list', N)#
	for (i in 1:N){#
		sur_data = sur_fun(alpha=alpha)#
		longi_data = longi_fun(sur_data, tau=tau)#
		outdata[[i]] = list(survival_data=sur_data, longitudinal_data=longi_data)		#
	}#
	outdata	#
}
testdata = sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
str(testdata)
sim_Ti = function(n=500, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = as.matrix(mvrnorm(n, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T)))#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	list(Ti=Time, H=H, U=U, W=W)	#
}
testdata = sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
str(testdata)
str(mvrnorm(n=10, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T)))
class(mvrnorm(n=10, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T)))
attr(mvrnorm(n=10, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T)))
attributes(mvrnorm(n=10, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T)))
a = mvrnorm(n, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))
a = mvrnorm(n=10, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))
attributes(a)
attributes(a)[[2]]
attributes(a)[[2]]=NULL
str(a)
sim_Ti = function(n=500, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	attributes(U)[[2]]=NULL # remove 'dimnames' attribute#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}		#
	list(Ti=Time, H=H, U=U, W=W)	#
}
testdata = sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
str(testdata)
sim_Ti = function(n=500, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	attributes(U)[[2]]=NULL # remove 'dimnames' attribute#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}	#
	Ti_id = which(!is.na(Time))#
	Time=Time[Ti_id][1:250]#
	U=U[Ti_id, ][1:250]#
	H=H[Ti_id, ][1:250]#
	W=W[Ti_id, ][1:250]#
	list(Ti=Time, H=H, U=U, W=W)	#
}
sim_longitudinal_data = function(survival_data=surdata, n=250, time=c(0, 0.25, 0.5, 0.75, 1, 3), tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# time - time points of observations#
	# tau - quantile#
	# sigma - scale parameter#
	time = time # at most # = length(time) observations per patient#
	count = sapply(new_time, function(x) sum(x > time)) # number of observations after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	X = cbind(1, rnorm(n))#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale=sigma, kappa=tau)		#
		}	#
	}#
	list(y = y, X = X, J=count, event=event)		#
}
longidata = sim_longitudinal_data(surdata, time=c(0, 0.25, 0.5, 0.75, 1, 3), tau=0.25)
surdata = sim_Ti(alpha=c(1,1))
sim_longitudinal_data = function(survival_data=surdata, n=250, time=c(0, 0.25, 0.5, 0.75, 1, 3), tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# time - time points of observations#
	# tau - quantile#
	# sigma - scale parameter#
	time = time # at most # = length(time) observations per patient#
	count = sapply(new_time, function(x) sum(x > time)) # number of observations after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	U = survival_data$U # random effects#
	H = survival_data$H#
	X = cbind(1, rnorm(n))#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale=sigma, kappa=tau)		#
		}	#
	}#
	list(y = y, X = X, J=count, event=event)		#
}
longidata = sim_longitudinal_data(surdata, time=c(0, 0.25, 0.5, 0.75, 1, 3), tau=0.25)
sim_Ti = function(n=500, alpha, delta=c(1,1), gamma=c(1,1)){#
	Time = numeric(n)#
	S = runif(n) # survival probability#
	H = matrix(rnorm(2*n), ncol=2)#
	U = mvrnorm(n, mu=c(0,0), Sigma=matrix(c(0.09, 0.09*0.16, 0.09*0.16, 0.09), nrow=2, byrow=T))#
	attributes(U)[[2]]=NULL # remove 'dimnames' attribute#
	W = matrix(rnorm(n*2), ncol=2)#
	if (alpha[1]==0 & alpha[2]==0){#
		for (i in 1:n){#
			Time[i] = - log(S[i]) / exp(gamma %*% W[i,])#
		}#
	}#
	else{#
		for (i in 1:n){#
			B = alpha[1] * delta[1] * H[i,1] + alpha[2] * U[i,1] + gamma %*% W[i,]#
			A = alpha[2] * U[i,2] + alpha[1] * delta[2] * H[i,2]#
			Time[i] = log(1-log(S[i])*A/exp(B))/A#
		}#
	}	#
	Ti_id = which(!is.na(Time))#
	Time=Time[Ti_id][1:250]#
	U=U[Ti_id, ][1:250, ]#
	H=H[Ti_id, ][1:250, ]#
	W=W[Ti_id, ][1:250, ]#
	list(Ti=Time, H=H, U=U, W=W)	#
}
surdata = sim_Ti(alpha=c(1,1))
str(surdata)
longidata = sim_longitudinal_data(surdata, time=c(0, 0.25, 0.5, 0.75, 1, 3), tau=0.25)
str(longidata)
sim_multiple_data = function(N, sur_fun=sim_Ti, longi_fun=sim_longitudinal_data, alpha, tau){#
	# N - number of data sets to generate#
	# sur_fun - function to simulate survival data#
	# longi_fun - function to sumualte longitudinal data#
	# association mechanism for JM#
	outdata = vector(mode='list', N)#
	for (i in 1:N){#
		sur_data = sur_fun(alpha=alpha)#
		longi_data = longi_fun(sur_data, tau=tau)#
		outdata[[i]] = list(survival_data=sur_data, longitudinal_data=longi_data)		#
	}#
	outdata	#
}
testdata = sim_multiple_data(N=2, alpha=c(1,1), tau=0.25)
str(testdata)
testdata[[1]][[2]]$event
sum(testdata[[1]][[2]]$event==0)
sum(testdata[[2]][[2]]$event==0)
testdata = sim_multiple_data(N=10, alpha=c(1,1), tau=0.25)
sum(testdata[[2]][[2]]$event==0)
sum(testdata[[3]][[2]]$event==0)
sum(testdata[[4]][[2]]$event==0)
sum(testdata[[5]][[2]]$event==0)
testdata[[5]][[2]]$event
sim_longitudinal_data = function(survival_data=surdata, n=250, time=c(0, 0.25, 0.5, 0.75, 1, 3), tau, sigma=1, beta=c(1,1), delta=c(1,1)){#
	# survival_data - data simulated from survival model#
	# n - # of subjects#
	# time - time points of observations#
	# tau - quantile#
	# sigma - scale parameter#
	time = time # at most # = length(time) observations per patient#
	y = matrix(NA, nrow=n, ncol=length(time)) # wide format#
	Ti = survival_data$Ti#
	U = survival_data$U # random effects#
	H = survival_data$H#
	X = cbind(1, rnorm(n))#
	count = sapply(Ti, function(x) sum(x > time)) # number of observations after drop-outs#
	event = as.numeric(count != 6) # 1 for event, 0 for censoring#
#
	for (i in 1:n){#
		for (j in 1:count[i]){#
			location = beta %*% X[i, ] + delta %*% c(H[i,1], H[i,2]*time[j]) + U[i,] %*% c(1, time[j])#
			y[i,j] = ralaplace(1, location, scale=sigma, kappa=tau)		#
		}	#
	}#
	list(y = y, X = X, J=count, event=event)		#
}
testdata = sim_multiple_data(N=10, alpha=c(1,1), tau=0.25)
str(testdata)
check = function(data, ind1, ind2, var){#
	data[[ind1]][[ind2]][[var]]#
}
check(testdata, 1, 2, 'J')
check = function(data, ind1, ind2, var, fun, ...){#
	var = data[[ind1]][[ind2]][[var]]#
	fun(var, ...)#
}
check(testdata, 1, 2, 'J', fun=table)
check(testdata, 2, 2, 'J', fun=table)
check(testdata, 2, 2, 'event', fun=table)
check(testdata, 1, 2, 'event', fun=table)
check(testdata, 3, 2, 'event', fun=table)
check(testdata, 4, 2, 'event', fun=table)
check(testdata, 5, 2, 'event', fun=table)
check(testdata, 6, 2, 'event', fun=table)
check(testdata, 7, 2, 'event', fun=table)
check(testdata, 8, 2, 'event', fun=table)
t1=Sys.time()#
testdata = sim_multiple_data(N=500, alpha=c(1,1), tau=0.25)#
t2=Sys.time()#
#
t2-t1
