### date: 2014/10/13 #
## datainput, QTcF_GL#
Apr28 = c(421, 416, 423, 439, 435, 434, 438, 433, 467, 449, 440, 446, 443, 441, 449, 445, 436, 446, 454)#
length(Apr28)#
#
Apr29 = c(431, 443, 429)#
#
May05 = c(441, 443, 455)#
#
May12 = c(466, 460, 470)#
#
May19 = c(458, 455, 458, 463, 455, 466, 464, 467, 475, 483, 466, 468, 472, 477, 479, 484, 493, 482, 481)#
length(May19)#
#
May20 = c(465)#
#
June10 = c(506)#
#
June16 = c(484, 479)#
#
June23 = c(484, 499, 491)#
#
June30 = c(461, 439, 459)#
#
July22 = c(464, 466, 468)#
QTF = c(Apr28, Apr29, May05, May12, May19, May20, June10, June16, June23, June30, July22)#
date = c(rep(0, length(Apr28)), rep(1, length(Apr29)), rep(7, length(May05)), rep(14, length(May12)), rep(21, length(May19)), rep(22, length(May20)), rep(43, length(June10)), rep(49, length(June16)), rep(56, length(June23)), rep(63, length(June30)), rep(86, length(July22)))#
#
QTFdf = data.frame(date, QTF)
May19_new = c(458, 455, 458, 463, 455, 466, 464, 467, 475, 461, 466, 468, 472, 477, 462, 465, 469, 470, 469)
QTF_new = c(Apr28, Apr29, May05, May12, May19_new, May20, June10, June16, June23, June30, July22)
QTFdf_new = data.frame(date, QTF_new)
May19_new_df = data.frame(date = rep(21, length(May19)), QTF=May19_new)
var.test(Apr28, May19_new)
ttest_new = t.test(Apr28, May19_new, var.equal=F)
ttest_new$estimate
ttest_new$p.value
ttest_new
var.test(May19, May19_new)
t.test(May19, May19_new, var.equal=F)
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		int = principle * rate#
		interest = interest + int#
		principle = principle - (monthly - int)#
#
	}	#
}
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		int = principle * rate#
		interest = interest + int#
		principle = principle - (monthly - int)#
#
	}	#
	interest#
}
fl(7150, 0.0411, 246.44)
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		int = principle * rate#
		interest = interest + int#
		principle = principle - (monthly - int)#
		print(principle)#
#
	}	#
	interest#
}
fl(7150, 0.0411, 246.44)
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		int = principle * rate#
		interest = interest + int#
		principle = principle - (monthly - int)#
	}	#
	interest#
}
fl(7150, 0.0411, 246.44)
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		int = principle * rate#
		interest = interest + int#
		principle = principle - (monthly - int)#
	}	#
	interest#
}
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		int = principle * rate#
		interest = interest + int#
		principle = principle - monthly#
	}	#
	interest#
}
fl(7150, 0.0411, 246.44)
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		inte = principle * rate#
		interest = interest + inte#
		principle = principle - monthly#
	}	#
	interest#
}
fl(7150, 0.0411, 246.44)
7150*0.0411
fl(7150, 0.0411/12, 246.44)
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		inte = principle * rate#
		interest = interest + inte#
		principle = principle - monthly + inte#
	}	#
	interest#
}
fl(7150, 0.0411/12, 246.44)
fl(7150.97, 0.0529/12, 166.76)
fl(7150.97, 0.0411/12, 166.76)
fl(7487, 0.0324/12, 166.76)
7150.97+299+33+5
fl(7487.97, 0.0324/12, 166.76)
fl(7487.97, 0.0324/12, 166.76) + 7150.97+299+33+5
fl(7183.97, 0.0529/12, 166.76) + 7183.97
fl(7150.97, 0.0411/12, 166.76) + 7150.97
fl(7150.97, 0.0411/12, 166.76)
fl(7150.97, 0.0411/12, 246.44) + 7150.97
fl(7183.97, 0.0529/12, 244.46) + 7183.97
fl = function(principle, rate, monthly){#
	interest = 0#
	while(principle>=0){#
		inte = principle * rate#
		interest = interest + inte#
		principle = principle - monthly + inte#
	}	#
	print(c(interest, principle))#
}
fl(7150.97, 0.0411/12, 246.44)
fl(7150.97, 0.0411/12, 166.76) + 7150.97
fl(7150.97, 0.0411/12, 166.76)
fl(7487.97, 0.0324/12, 166.76)
fl(7150.97, 0.0411/12, 166.76)
fl(7150.97, 0.0411/12, 166.76) + 7150.97
7150.97+299+33+5
fl(7487.97, 0.0324/12, 166.76) + 7150.97+299+33+5
fl(7150.97, 0.0411/12, 166.76) + 7150.97
fl(7487.97, 0.0324/12, 166.76) + 7150.97+299+33+5
fl(7150.97, 0.0411/12, 166.76) + 7150.97
f <- function(x) 10
formals(f)
body(x)
body(f)
formals(f)$x
g <- function(x = 20, y) {#
  x + y#
}
formals(g)
formals(g)$x = ''
formals(g)$y = 10
formals(g)
formals(g)$x = quote(expr=)
formals(g)
g
Sys.info()
?update.formula
?modify_call
?write.csv
edit(write.csv)
?match.call
match.call(get, call("get", "abc", i = FALSE, p = 3))
call("get", "abc", i = FALSE, p = 3)
is.expression(call("get", "abc", i = FALSE, p = 3))
is.call(call("get", "abc", i = FALSE, p = 3))
fun <- function(x, lower = 0, upper = 1) {#
  structure((x - lower) / (upper - lower), CALL = match.call())#
}
fun(4 * atan(1), u = pi)
fun <- function(x, lower = 0, upper = 1) {#
 match.call()#
}
fun(4 * atan(1), u = pi)
list(x = quote(a))
seq_along(10)
seq_along(c(1,1,2))
logical_abbr <- function(x) {#
  if (is.atomic(x)) {#
    FALSE#
  } else if (is.name(x)) {#
    identical(x, quote(T)) || identical(x, quote(F))#
  } else if (is.call(x) || is.pairlist(x)) {#
    for (i in seq_along(x)) {#
      (logical_abbr(x[[i]]))#
    }#
    FALSE#
  } else {#
    stop("Don't know how to handle type ", typeof(x), #
      call. = FALSE)#
  }#
}
logical_abbr(quote(TRUE))
logical_abbr(quote(T))
logical_abbr(quote(function(x, na.rm = T) FALSE))
logical_abbr(quote(mean(x, na.rm = T)))
logical_abbr <- function(x) {#
  if (is.atomic(x)) {#
    FALSE#
  } else if (is.name(x)) {#
    identical(x, quote(T)) || identical(x, quote(F))#
  } else if (is.call(x) || is.pairlist(x)) {#
    for (i in seq_along(x)) {#
      if (logical_abbr(x[[i]])) return(TRUE)#
    }#
    FALSE#
  } else {#
    stop("Don't know how to handle type ", typeof(x), #
      call. = FALSE)#
  }#
}
logical_abbr(quote(mean(x, na.rm = T)))
logical_abbr(quote(function(x, na.rm = T) FALSE))
?optimize
monthly_pay = function(ppl=20000, rate=0.04/12, monthly, month=48){#
	int = 0#
	for (i in 1:month){#
		int = int + ppl*rate#
		ppl = ppl - monthly#
	}#
	int + ppl - monthly * month#
}
optimize(f=monthly_pay, c(0, 10000), tol=0.0001)
optimize(f=monthly_pay, c(0, 10000), tol=0.0001, monthly=200)
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
monthly_pay = function(ppl=20000, rate=0.04/12, x, month=48){#
	int = 0#
	for (i in 1:month){#
		int = int + ppl*rate#
		ppl = ppl - x#
	}#
	int + ppl - x * month#
}
optimize(f=monthly_pay, c(0, 10000), tol=0.0001)
monthly_pay = function(ppl=20000, rate=0.04/12, x, month=48){#
	int = 0#
	for (i in 1:month){#
		int = int + ppl*rate#
		ppl = ppl - x + ppl*rate#
	}#
	int + ppl - x * month#
}
optimize(f=monthly_pay, c(0, 10000), tol=0.0001)
optimize(f=monthly_pay, c(0, 10000), tol=0.0001, x=100)
monthly_pay = function(ppl=20000, rate=0.04/12, month=48, tol=1e-4){#
	min = 0#
	max = ppl#
	while (diff>=tol){#
		int = 0#
		x = (min+max)/2#
		for (i in 1:month){#
			int = int + ppl*rate#
			ppl = ppl - x + ppl*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
	}#
	x#
}
monthly_pay()
monthly_pay = function(ppl=20000, rate=0.04/12, month=48, tol=1e-4){#
	min = 0#
	max = ppl#
	diff = ppl#
	while (diff>=tol){#
		int = 0#
		x = (min+max)/2#
		for (i in 1:month){#
			int = int + ppl*rate#
			ppl = ppl - x + ppl*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
		print(x)#
	}#
	x#
}
monthly_pay()
monthly_pay = function(ppl=20000, rate=0.04/12, month=48, tol=1e-4){#
	min = 0#
	max = ppl#
	diff = ppl#
	while (diff>=tol){#
		prin = ppl#
		int = 0#
		x = (min+max)/2#
		for (i in 1:month){#
			int = int + ppl*rate#
			prin = prin - x + prin*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
		print(x)#
	}#
	x#
}
monthly_pay()
monthly_pay = function(ppl=20000, rate=0.04/12, month=48, tol=1e-4){#
	min = 0#
	max = ppl#
	diff = ppl#
	while (diff>=tol){#
		prin = ppl#
		int = 0#
		x = (min+max)/2#
		for (i in 1:month){#
			int = int + ppl*rate#
			prin = prin - x + prin*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
		print(diff)#
	}#
	x#
}
monthly_pay()
monthly_pay = function(ppl=20000, rate=0.04/12, month=48, tol=1e-4){#
	min = 0#
	max = ppl#
	diff = ppl#
	while (abs(diff)>=tol){#
		prin = ppl#
		int = 0#
		x = (min+max)/2#
		for (i in 1:month){#
			int = int + ppl*rate#
			prin = prin - x + prin*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
		print(diff)#
	}#
	x#
}
monthly_pay()
monthly_pay = function(ppl=13000, rate=0.04/12, month=60, tol=1e-4){#
	min = 0#
	max = ppl#
	diff = ppl#
	while (abs(diff)>=tol){#
		prin = ppl#
		int = 0#
		x = (min+max)/2#
		for (i in 1:month){#
			int = int + ppl*rate#
			prin = prin - x + prin*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
		print(diff)#
	}#
	x#
}
monthly_pay()
monthly_pay(ppl=11000)
monthly_pay(ppl=14000)
monthly_pay(ppl=12000)
monthly_pay = function(ppl=13000, rate=0.04/12, month=60, tol=1e-4){#
	min = 0#
	max = ppl#
	diff = ppl#
	while (abs(diff)>=tol){#
		prin = ppl#
		int = 0#
		x = (min+max)/2 # binary search#
		for (i in 1:month){#
			int = int + ppl*rate#
			prin = prin - x + prin*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
		# print(diff)#
	}#
	x#
}
monthly_pay(ppl=12000)
monthly_pay(ppl=22000)
monthly_pay(ppl=12000, month=48)
monthly_pay = function(ppl=13000, rate=0.04/12, month=60, tol=1e-4){#
	min = 0#
	max = ppl#
	diff = ppl#
	while (abs(diff)>=tol){#
		prin = ppl#
		int = 0#
		x = (min+max)/2 # binary search#
		for (i in 1:month){#
			int = int + ppl*rate#
			prin = prin - x + prin*rate#
		}#
		diff = int + ppl - x * month#
		if (diff > 0) min = x#
		else max = x#
		# print(diff)#
	}#
	totpaid = ppl + int#
	list(monthly_payment=x, total_paied=totpaid, interest=int)#
}
monthly_pay(ppl=12000, month=48)
cal_totint = function(ppl, monthly, rate, tol){#
	while (ppl >= tol){#
		current_int = ppl * rate#
		int += current_int#
		ppl = ppl - monthly + current_int#
		cal_totint(ppl)#
	}#
	return(int)#
}
int = 0#
cal_totint = function(ppl, monthly, rate, tol){#
	while (ppl >= tol){#
		current_int = ppl * rate#
		int = int + current_int#
		ppl = ppl - monthly + current_int#
		cal_totint(ppl)#
	}#
	return(int)#
}
cal_totint(12000, 290, 0.04/12, 1e-6)
cal_totint(ppl=12000, monthly=290, rate=0.04/12, tol=1e-6)
cal_totint = function(ppl, monthly, rate, tol){#
	while (ppl >= tol){#
		current_int = ppl * rate#
		int = int + current_int#
		ppl = ppl - monthly + current_int#
		cal_totint(ppl)#
	}#
	return(int)#
}
cal_totint(ppl=12000, monthly=290, rate=0.04/12, tol=1e-6)
cal_totint = function(ppl, monthly, rate, tol=1e-6){#
	while (ppl >= tol){#
		current_int = ppl * rate#
		int = int + current_int#
		ppl = ppl - monthly + current_int#
		cal_totint(ppl)#
	}#
	return(int)#
}
cal_totint(ppl=12000, monthly=290, rate=0.04/12)
cal_totint = function(ppl, monthly, rate, tol=1e-6){#
	while (ppl >= tol){#
		current_int = ppl * rate#
		int = int + current_int#
		ppl = ppl - monthly + current_int#
		cal_totint(ppl)#
	}#
	return(int)#
}
cal_totint = function(ppl, monthly, rate, tol=1e-6){#
	while (ppl >= tol){#
		current_int = ppl * rate#
		int = int + current_int#
		ppl = ppl - monthly + current_int#
		cal_totint(ppl, monthly, rate)#
	}#
	return(int)#
}
cal_totint(ppl=12000, monthly=290, rate=0.04/12)
cal_totint = function(ppl, monthly, rate, tol=1e-6){#
	while (abs(ppl) >= tol){#
		current_int = ppl * rate#
		int = int + current_int#
		ppl = ppl - monthly + current_int#
		cal_totint(ppl, monthly, rate)#
	}#
	return(int)#
}
int = 0
cal_totint(ppl=12000, monthly=290, rate=0.04/12)
monthly_pay(ppl=12000, month=60)
monthly_pay(ppl=12000, month=36)
?ns
library(splines)
?ns
bs(height, df = 5)
x <- seq(1, 5, by=1/4)
X
x
basis <- splineDesign(knots = c(1, 1, 1, 1, 3, 4, 5, 5, 5, 5), x = x)
basis
basis <- splineDesign(knots = c(1, 2,3), x = x)
?splineDesing
?splineDesign
basis <- splineDesign(knots = c(1, 2,3),ord=3, x = x)
?splineDesign
basis <- splineDesign(knots = c(1,2,3),ord=4, x = x)
splineDesign(knots = 1:10, x = 4:7)
Matrix::drop0(zapsmall(6*splineDesign(knots = 1:40, x = 4:37, sparse = TRUE)))
?splineDesign
library(pbs)
install.packages("pbs")
library(pbs)
?pbs
x = seq(1,628)/100#
     z = rep(seq(1, 314)/100, 2)
pbs(x, df = 5, Boundary.knots = c(0, 2*pi))
pbs(x, df = 3, Boundary.knots = c(0, 2*pi))
x
library(Hmisc)
x <- 1:100
rcspline.eval(x, nk=4, inclx=TRUE)
dbinom(0, 219, 0.005)
x1<-runif(1000,0,2*pi)
plot(density(x1))
x1<-runif(10000,0,2*pi)
plot(density(x1))
b16.stratum + b22.drug + b23.sex + b24.prevoi + b25.stratum - 1
formula1 = Y ~ mu + b12.time + b13.timedrug + b14.sex + b15.prevoi +#
  b16.stratum + b22.drug + b23.sex + b24.prevoi + b25.stratum - 1
formula1
setwd("/Users/askming/Documents/github/Projects/1.\ QRJM/simulaiton/R\ code/INLA_data/")
data1 <- read.table("longitudinal.txt", header=TRUE)
data2 <- read.table("survival.data.txt",header=T)
head(data1)
head(data2)
dim(data2)
N <- 467#
#
##prepare the data set#
ng = dim(data1)[1]#
ns  = N
y.long <- c(data1$y, rep(NA, ns))
y.surv <- inla.surv(time = c(rep(NA, ng), data2$time), event = c(rep(NA, ng),data2$event))
library(INLA)
y.surv <- inla.surv(time = c(rep(NA, ng), data2$time), event = c(rep(NA, ng),data2$event))
Yjoint <- list(y.long, y.surv)
str(Yjoint)
linear.covariate <- data.frame(mu = as.factor(c(rep(1, ng), rep(2, ns))),
b12.time = c(data1$b12.time, rep(0, ns)),
b13.timedrug = c(data1$b13.timedrug, rep(0, ns)),
b14.sex = c(data1$b14.sex, rep(0, ns)),
b15.prevoi =  c(data1$b15.prevoi, rep(0, ns)),
b16.stratum =  c(data1$b16.stratum, rep(0, ns)),
b22.drug = c(rep(0, ng), data2$b22.drug),
b23.sex = c(rep(0, ng), data2$b23.sex),
b24.prevoi = c(rep(0, ng), data2$b24.prevoi),
b25.stratum = c(rep(0, ng), data2$b25.stratum))
random.covariate <- list(U11 = c(rep(1:N, each=5),rep(NA, ns)),#
                         U21 = c(rep(N+(1:N), each=5),rep(NA, ns)),#
                         U12 = c(rep(NA,ng), 1:N),#
                         U22 = c(rep(NA,ng), N+(1:N)),#
                         U3 = c(rep(NA,ng),1:N))
joint.data <- c(linear.covariate,random.covariate)
joint.data$Y <- Yjoint
formula1 = Y ~ mu + b12.time + b13.timedrug + b14.sex + b15.prevoi +#
  b16.stratum + b22.drug + b23.sex + b24.prevoi + b25.stratum - 1
mod1 = inla(formula1, family = c("gaussian","exponential"),#
  data = joint.data, verbose=TRUE, control.compute=list(dic=TRUE))
mod1
summary(mod1)
formula2 = Y ~ mu + b12.time + b13.timedrug + b14.sex + b15.prevoi +#
  b16.stratum + b22.drug + b23.sex + b24.prevoi + b25.stratum - 1 +#
  f(U3, model="iid")#
#
mod2 = inla(formula2, family = c("gaussian","exponential"),#
  data = joint.data, verbose=TRUE, control.compute=list(dic=TRUE))
summary(mod2)
formula3 = Y ~ mu + b12.time + b13.timedrug + b14.sex + b15.prevoi +#
  b16.stratum + b22.drug + b23.sex + b24.prevoi + b25.stratum - 1 +#
  f(U11 , model="iid")
mod3 = inla(formula3, family = c("gaussian","exponential"),#
  data = joint.data, verbose=TRUE, control.compute=list(dic=TRUE))
summary(mod3)
?inla
n = 100 x1 = runif(n) eta1 = 1 + x1 y1 = rbinom(n, size = 1, x2 = runif(n) eta2 = 1 + x2 y2 = rpois(n, exp(eta2)) Y = matrix(NA, 2*n, 2) # Y[1:n, 1] = y1 # binomial data Y[1:n + n, 2] = y2 # poisson data Ntrials = c(rep(1,n), rep(NA, n)) # required only for binomial data xx = c(x1, x2) formula = Y ~ 1 + xx result = inla(formula, data = list(Y = Y, xx = xx), family = c("binomial", "poisson"), Ntrials = Ntrials) summary(result) #
plot(result)
n = 100
n =100
n =100
n=100
n=100
x1 = runif(n)
eta1 = 1 + x1
eta1 = 1 + x1
eta1 = 1 + x1
y1 = rbinom(n, size = 1, prob=exp(eta1)/(1+exp(eta1)))
x2 = runif(n)
eta2 = 1 + x2
y2 = rpois(n, exp(eta2))
Y = matrix(NA, 2*n, 2)
Y[1:n, 1] = y1 # binomial data
Y[1:n + n, 2] = y2 # poisson data
Y[1+n:  2*n, 2] = y2 # poisson data
Y[1+n: 2*n, 2] = y2 # poisson data
y2
dim(Y)
length(y2)
Y[1+n: 2*n,  2] = y2 # poisson data
1:n+n
Y[1:n + n, 2] = y2 # poisson data
Ntrials = c(rep(1,n), rep(NA, n))
xx = c(x1, x2)
formula = Y ~ 1 + xx
result = inla(formula, data = list(Y = Y, xx = xx), family = c("binomial", "poisson"), Ntrials = Ntrials) summary(result)
result = inla(formula, data = list(Y = Y, xx = xx), family = c("binomial", "poisson"), Ntrials = Ntrials)
summary(result)
plot(result)
exp(eta1)/(1+exp(eta1))
plot(result)
n<-c(10,50,1000) #
k<-5#
alpha<-0.05#
g<-seq(1:50)#
#
#Calculate CI width for bonferroni method#
B.CI<-matrix(NA,50,3)#
for (j in 1:3){#
for(i in 1:50){#
B.CI[i,j]<-2*qt(alpha/(2*i),n[j]-k-1,lower.tail=F)#
}#
}#
#
#Calculate CI width for Scheffe method#
#Contrl the overall alphal level for Scheffe method as 0.05#
S.CI<-numeric(3)#
for (j in 1:3){#
S.CI[j]<-2*sqrt((k+1)*qf(alpha,k+1,n[j]-k-1,lower.tail=F))#
}#
#
par(mfrow=c(2,2))#
for (i in 1:3){#
plot(g,B.CI[,i],type="l",col="red",ylab="Width of CI",#
xlab="Number of simultaneous tests",ylim=c(4,15))#
abline(a=S.CI[i],b=0,col="blue")#
title(paste("Sample size=",n[i]))#
legend("topright",c("Bonferroni","Scheffe"),col=c("red","blue"),lwd=c(1,1),cex=0.6)#
}
n<-c(10,50,100) #
k<-5#
alpha<-0.05#
g<-seq(1:500)#
#
#Calculate CI width for bonferroni method#
B.CI<-matrix(NA,50,3)#
for (j in 1:3){#
for(i in 1:50){#
B.CI[i,j]<-2*qt(alpha/(2*i),n[j]-k-1,lower.tail=F)#
}#
}#
#
#Calculate CI width for Scheffe method#
#Contrl the overall alphal level for Scheffe method as 0.05#
S.CI<-numeric(3)#
for (j in 1:3){#
S.CI[j]<-2*sqrt((k+1)*qf(alpha,k+1,n[j]-k-1,lower.tail=F))#
}#
#
par(mfrow=c(2,2))#
for (i in 1:3){#
plot(g,B.CI[,i],type="l",col="red",ylab="Width of CI",#
xlab="Number of simultaneous tests",ylim=c(4,15))#
abline(a=S.CI[i],b=0,col="blue")#
title(paste("Sample size=",n[i]))#
legend("topright",c("Bonferroni","Scheffe"),col=c("red","blue"),lwd=c(1,1),cex=0.6)#
}
#Calculate CI width for bonferroni method#
B.CI<-matrix(NA,50,3)#
for (j in 1:3){#
for(i in 1:500){#
B.CI[i,j]<-2*qt(alpha/(2*i),n[j]-k-1,lower.tail=F)#
}#
}#
#
#Calculate CI width for Scheffe method#
#Contrl the overall alphal level for Scheffe method as 0.05#
S.CI<-numeric(3)#
for (j in 1:3){#
S.CI[j]<-2*sqrt((k+1)*qf(alpha,k+1,n[j]-k-1,lower.tail=F))#
}#
#
par(mfrow=c(2,2))#
for (i in 1:3){#
plot(g,B.CI[,i],type="l",col="red",ylab="Width of CI",#
xlab="Number of simultaneous tests",ylim=c(4,15))#
abline(a=S.CI[i],b=0,col="blue")#
title(paste("Sample size=",n[i]))#
legend("topright",c("Bonferroni","Scheffe"),col=c("red","blue"),lwd=c(1,1),cex=0.6)#
}
n<-c(10,50,100) #
k<-5#
alpha<-0.05#
g<-seq(1:500)#
#
#Calculate CI width for bonferroni method#
B.CI<-matrix(NA,50,3)#
for (j in 1:3){#
for(i in 1:500){#
B.CI[i,j]<-2*qt(alpha/(2*i),n[j]-k-1,lower.tail=F)#
}#
}#
#
#Calculate CI width for Scheffe method#
#Contrl the overall alphal level for Scheffe method as 0.05#
S.CI<-numeric(3)#
for (j in 1:3){#
S.CI[j]<-2*sqrt((k+1)*qf(alpha,k+1,n[j]-k-1,lower.tail=F))#
}#
#
par(mfrow=c(2,2))#
for (i in 1:3){#
plot(g,B.CI[,i],type="l",col="red",ylab="Width of CI",#
xlab="Number of simultaneous tests",ylim=c(4,15))#
abline(a=S.CI[i],b=0,col="blue")#
title(paste("Sample size=",n[i]))#
legend("topright",c("Bonferroni","Scheffe"),col=c("red","blue"),lwd=c(1,1),cex=0.6)#
}
n<-c(10,50,100) #
k<-5#
alpha<-0.05#
g<-seq(1:500)#
#
#Calculate CI width for bonferroni method#
B.CI<-matrix(NA,500,3)#
for (j in 1:3){#
for(i in 1:500){#
B.CI[i,j]<-2*qt(alpha/(2*i),n[j]-k-1,lower.tail=F)#
}#
}#
#
#Calculate CI width for Scheffe method#
#Contrl the overall alphal level for Scheffe method as 0.05#
S.CI<-numeric(3)#
for (j in 1:3){#
S.CI[j]<-2*sqrt((k+1)*qf(alpha,k+1,n[j]-k-1,lower.tail=F))#
}#
#
par(mfrow=c(2,2))#
for (i in 1:3){#
plot(g,B.CI[,i],type="l",col="red",ylab="Width of CI",#
xlab="Number of simultaneous tests",ylim=c(4,15))#
abline(a=S.CI[i],b=0,col="blue")#
title(paste("Sample size=",n[i]))#
legend("topright",c("Bonferroni","Scheffe"),col=c("red","blue"),lwd=c(1,1),cex=0.6)#
}
